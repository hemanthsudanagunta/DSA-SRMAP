Q) Write a program to count the number of inversions in an array
of n integers. The inversion exists if A[i] > A[j] for i < j. Use the O(n
log n) time complexity algorithm to implement this. [Hint: Change
the merge procedure of mergesort to do that]

A)
#include <stdio.h>
#include <stdlib.h>
long long int merge(int arr[], int temp[], int left, int mid, int right) {
int i = left;
int j = mid + 1;
int k = left;
long long int inversionCount = 0;
while (i <= mid && j <= right) {
if (arr[i] <= arr[j]) {
temp[k++] = arr[i++];
} else {
temp[k++] = arr[j++];
inversionCount += (mid - i + 1);
}
}
while (i <= mid) {
temp[k++] = arr[i++];
}
while (j <= right) {
temp[k++] = arr[j++];
}
for (i = left; i <= right; i++) {
arr[i] = temp[i];
}
return inversionCount;
}
long long int mergeSort(int arr[], int temp[], int left, int right) {
long long int inversionCount = 0;

if (left < right) {
int mid = (left + right) / 2;
inversionCount += mergeSort(arr, temp, left, mid);
inversionCount += mergeSort(arr, temp, mid + 1, right);
inversionCount += merge(arr, temp, left, mid, right);
}
return inversionCount;
}
int main() {
int n;

printf("Enter the size of the array: ");
scanf("%d", &n);
int arr[n];
int temp[n];

printf("Enter the array elements:\n");
for (int i = 0; i < n; i++) {
scanf("%d", &arr[i]);
}
long long int inversionCount = mergeSort(arr, temp, 0, n - 1);
printf("Number of inversions: %lld\n", inversionCount);
return 0;
}